{"tagline":"scoreboard is a light weight leaderboard for node.js. It can be used to keep score and ranks between multiple objects and scoring types. It is backed by Redis and sorted sets.","body":"# scoreboard\r\n\r\n  scoreboard is a light weight leaderboard for node.js.  It can be used keep score and ranks between multiple objects and scoring types. It is backed by Redis and sorted sets.\r\n\r\n## Where to use\r\n* Trending Charts\r\n* Realtime Charts\r\n* Historical Charts\r\n* Game mechanics\r\n\r\n## Installation\r\n\r\n      $ npm install scoreboard\r\n\r\n## Example\r\n\r\n### Setup\r\n```js    \r\nvar scoreboard = require('scoreboard')\r\nvar Score = scoreboard.Score;\r\nvar scores = new Score();\r\n````\r\n\r\n### Redis Connection Settings\r\n```javascript\r\nscoreboard.redis.createClient = function() {\r\n  var client = redis.createClient(1234, '192.168.100.1');\r\n  client.auth('somethingsecret');\r\n  return client;\r\n};\r\n```\r\n\r\n### Indexing\r\n Awarding point to an object is simple. Scoreboard supports multiple leaderboards, and is are partitioned by different a `key`\r\n\r\n```js\r\nscores.index('monsters', 100, 'edward');\r\nscores.index('aliens', 100, 'edward');\r\nscores.index('monsters', 50, 'nancy');\r\nscores.index('aliens', 200, 'nancy');\r\n```\r\n\r\n### Leaderboard\r\n To perform a query against the scoreboard to find the leaders, you simple use `Score#leader` with a list of keys, and invoke `run` with a callback to fetch the results\r\n\r\n#### Single scoreboard\r\n\r\n Find leader in just `monsters`\r\n\r\n```js\r\nscores.leaders({keys:['monsters']}).run(function(err, leaderboard)) {\r\n  console.log(leaderboard);\r\n});\r\n```\r\n\r\n Results\r\n\r\n```js\r\n['edward', 'nancy']\r\n```\r\n\r\n#### Multiple scoreboards\r\n\r\n Find leader in both `monsters` and `aliens`.  The scores across the two sets are totalled together\r\n\r\n```js\r\nscores.leaders({keys:['monsters','aliens']}).run(function(err, leaderboard)) {\r\n  console.log(leaderboard);\r\n});\r\n```\r\n\r\n Results:\r\n\r\n```js\r\n['nancy', 'edward']\r\n```\r\n\r\n#### Time series plus multiple scoreboards\r\n\r\n Score are stored in Redis on two types of buckets, `overall` and `days`.  Obviously the `overall` buckets are used to track scores thoughout the entire life of the scoreboard.  But `day` buckets allow for more percise queries. \r\n \r\nThis will return the leaderboard for `monsters` and `aliens` between `1/1/2012` and `1/31/2012`:\r\n\r\n```js\r\nscores.leaders({ keys:['monsters','aliens'], date: {$start: new Date('1/1/2012'), $end: new Date('1/31/2012') } })\r\n  .run(function(err, leaderboard)) {\r\n    console.log(leaderboard);\r\n  });\r\n``` \r\n\r\n Results:\r\n\r\n```js\r\n['nancy', 'edward']\r\n```\r\n\r\n#### Pagination\r\n\r\n Paginations is super easy with scoreboard.  All you need is `skip` and `limit`\r\n\r\n This will return the top 0 - 100 of the time series leaderboard\r\n\r\n```js\r\nscores.leaders({ keys:['monsters','aliens'], date: {$start: new Date('1/1/2012'), $end: new Date('1/31/2012') } })\r\n  .skip(0)\r\n  .limit(100)\r\n  .run(function(err, leaderboard)) {\r\n    console.log(leaderboard);\r\n  });\r\n``` \r\n\r\n\r\n## License \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Edward Chan &lt;edward@knowsee.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Scoreboard","google":""}